# -*- coding: utf-8 -*-
"""Untitled41.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ot2x0Cv-wkIXFGhkywEkuButtiZJBKHv
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('smartwatch_activity_dataset.csv')

df

df.info()

df.describe()

X = df.iloc[:, :-1]

X

Y=df.iloc[:, -1]

Y

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
Y=le.fit_transform(Y)
Y

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=0)

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
X_train = sc_x.fit_transform(X_train)
X_test = sc_x.transform(X_test)

import keras
from keras.models import Sequential
from keras.layers import Dense

classifier=Sequential()

classifier.add(keras.Input(shape=(10,)))

classifier.add(Dense(units=6, kernel_initializer='uniform', activation='relu'))

classifier.add(Dense(units=6, kernel_initializer='uniform', activation='relu'))

classifier.add(Dense(units=1, kernel_initializer='uniform', activation='sigmoid'))

classifier.summary()

classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics = ['accuracy'])

classifier.fit(X_train, Y_train, batch_size=10, epochs=100)

classifier.save("smartwatch_activity.h5")

Y_pred = classifier.predict(X_test)

Y_pred=(Y_pred>0.5)

Y_pred.argmax()

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_test, Y_pred)

from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix
print("\n--- ANN Evaluation ---")
print(f"Accuracy: {accuracy_score(Y_test, Y_pred):.4f}")
print(f"Precision: {precision_score(Y_test, Y_pred):.4f}")
print(f"Recall: {recall_score(Y_test, Y_pred):.4f}")

print("\nEnter the following values to test the ANN model:")
user_input = []
columns = X.columns

# Collect input from user
for col in columns:
    val = float(input(f"{col}: "))
    user_input.append(val)

# Scale and predict
user_input_scaled = sc_x.transform([user_input])
user_result = classifier.predict(user_input_scaled)[0][0]
print("\nPrediction: Healthy Day" if user_result > 0.5 else "\nPrediction: Not a Healthy Day")

# Unsupervsed learing

from sklearn.cluster import KMeans

kmeans = KMeans(n_clusters=2, random_state=42)

clusters = kmeans.fit_predict(sc_x.transform(X))

df['cluster'] = clusters

df

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='sleep_quality_score', y='stress_level', hue='cluster', palette='deep')
plt.title("K-Means Clustering (Sleep Quality vs Stress Level)")
plt.xlabel("Sleep Quality Score")
plt.ylabel("Stress Level")
plt.legend(title="Cluster")
plt.show()